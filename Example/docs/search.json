{"Structs/KPODisposable.html#/s:6Djessi13KPODisposableV10invalidateyyF":{"name":"invalidate()","abstract":"<p>Invalidation method. It should be called when you dont need this disposable.</p>","parent_name":"KPODisposable"},"Structs/KPODisposable.html":{"name":"KPODisposable","abstract":"<p>Implementation of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Disposable.html\">Disposable</a></code> protocol.</p>"},"Protocols/Queue.html#/s:6Djessi5QueueP7executeyyyc5block_tF":{"name":"execute(block:)","abstract":"<p>Execution function on specifed thread.</p>","parent_name":"Queue"},"Protocols/Disposable.html#/s:6Djessi10DisposableP10invalidateyyF":{"name":"invalidate()","abstract":"<p>Invalidation method. It should be called when you dont need this disposable.</p>","parent_name":"Disposable"},"Protocols/Disposable.html#/s:6Djessi10DisposablePAAE7disposeyAA10DisposeBagC2in_tF":{"name":"dispose(in:)","abstract":"<p>Append this disposable to specified dispose bag.</p>","parent_name":"Disposable"},"Protocols/KeyPathObservable.html#/s:6Djessi17KeyPathObservableP6source6SourceQzv":{"name":"source","abstract":"<p>Source object whose field will be observed. It constrained to <code>NSObject</code> because only <code>NSObject</code> support smart key path observing.</p>","parent_name":"KeyPathObservable"},"Protocols/KeyPathObservable.html#/s:6Djessi17KeyPathObservableP03keyC0s017ReferenceWritablebC0Cy6SourceQz5ValueQzGv":{"name":"keyPath","abstract":"<p>Smart key path which used to produce observing.</p>","parent_name":"KeyPathObservable"},"Protocols/Observable.html#/s:6Djessi10ObservableP7observeAA10Disposable_py5ValueQzc6onNext_tF":{"name":"observe(onNext:)","abstract":"<p>Subscribtion to next value changes.</p>","parent_name":"Observable"},"Protocols/Observable.html#/s:6Djessi10ObservablePA2aBRzs9Equatable5ValueRpzlE4bindAA10Disposable_pqd__2to_tAA07KeyPathB0Rd__AEQyd__AFRSlF":{"name":"bind(to:)","abstract":"<p>Bind current observable changes to another one with identical value type.</p>","parent_name":"Observable"},"Protocols/Observable.html#/s:6Djessi10ObservablePA2aBRzs9Equatable5ValueRpzlE4bindAA10Disposable_pqd__2to_tAA07KeyPathB0Rd__AFSgAERtd__lF":{"name":"bind(to:)","abstract":"<p>Bind current observable changes to another one with optional value type of current one.</p>","parent_name":"Observable"},"Protocols/Observable.html#/s:6Djessi10ObservablePA2aBRzs9Equatable5ValueRpzlE4bindAA10Disposable_pqd__2to_tAA07KeyPathB0Rd__SQyAFGAERtd__lF":{"name":"bind(to:)","abstract":"<p>Bind current observable changes to another one with implicitly unwrapped value type of current one.</p>","parent_name":"Observable"},"Protocols/Observable.html#/s:6Djessi10ObservablePAAE3mapAA09TransformB0Cyqd__xGqd__5ValueQzc9transform_tlF":{"name":"map(transform:)","abstract":"<p>Add transformation for current observable. New observable will be firing with transformed values.</p>","parent_name":"Observable"},"Protocols/Observable.html#/s:6Djessi10ObservablePAAE7deliverAA06ThreadB0CyxGAA5Queue_p2on_tF":{"name":"deliver(on:)","abstract":"<p>Add thread support on specified <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Queue.html\">Queue</a></code> for current observable.</p>","parent_name":"Observable"},"Protocols/Observable.html#/s:6Djessi10ObservablePAAE6filterAA09ConditionB0CyxGSb5ValueQzc9condition_tF":{"name":"filter(condition:)","abstract":"<p>Add condition for current observable. New observable will be fired if value satisfy to <code>condition</code>.</p>","parent_name":"Observable"},"Protocols/Observable.html":{"name":"Observable","abstract":"<p>Core protocol of all observables.</p>"},"Protocols/KeyPathObservable.html":{"name":"KeyPathObservable","abstract":"<p>Core observable for smart key path observing.</p>"},"Protocols/Disposable.html":{"name":"Disposable","abstract":"<p>Core protocol for all observables.</p>"},"Protocols/Queue.html":{"name":"Queue","abstract":"<p>Core protocol for observables to support multi-threads.</p>"},"Extensions/NSObjectProtocol.html#/s:So16NSObjectProtocolP6DjessiSo0A0CRbzlE10observableAC20AnyKeyPathObservableCyxqd__Gs017ReferenceWritablefG0Cyxqd__G2at_Sb25shouldObserveInitialValuetlF":{"name":"observable(at:shouldObserveInitialValue:)","abstract":"<p>Create new observable with specified key path.</p>","parent_name":"NSObjectProtocol"},"Extensions/NSObjectProtocol.html":{"name":"NSObjectProtocol"},"Classes/GCDQueue/DispatchStyle.html#/s:6Djessi8GCDQueueC13DispatchStyleO5asyncA2EmF":{"name":"async","parent_name":"DispatchStyle"},"Classes/GCDQueue/DispatchStyle.html#/s:6Djessi8GCDQueueC13DispatchStyleO4syncA2EmF":{"name":"sync","parent_name":"DispatchStyle"},"Classes/GCDQueue/DispatchStyle.html":{"name":"DispatchStyle","abstract":"<p>Dispatch style.</p>","parent_name":"GCDQueue"},"Classes/GCDQueue.html#/s:6Djessi8GCDQueueCACSo13DispatchQueueC5queue_AC0C5StyleO5styletcfc":{"name":"init(queue:style:)","abstract":"<p>Init GCD wrapper with custom <code>DispatchQueue</code> &amp; <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/GCDQueue/DispatchStyle.html\">DispatchStyle</a></code>.</p>","parent_name":"GCDQueue"},"Classes/GCDQueue.html#/s:6Djessi8GCDQueueC7executeyyyc5block_tF":{"name":"execute(block:)","abstract":"<p>Execution function on specified <code>DispatchQueue</code> with selected <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/GCDQueue/DispatchStyle.html\">DispatchStyle</a></code>.</p>","parent_name":"GCDQueue"},"Classes/GCDQueue.html#/s:6Djessi8GCDQueueC9asyncMainACvZ":{"name":"asyncMain","abstract":"<p>Predefined async main <code>DispatchQueue</code>.</p>","parent_name":"GCDQueue"},"Classes/GCDQueue.html#/s:6Djessi8GCDQueueC8syncMainACvZ":{"name":"syncMain","abstract":"<p>Predefined sync main <code>DispatchQueue</code>.</p>","parent_name":"GCDQueue"},"Classes/ConditionObservable.html#/s:6Djessi19ConditionObservableC5Valuea":{"name":"Value","abstract":"<p>Observing value type</p>","parent_name":"ConditionObservable"},"Classes/ConditionObservable.html#/s:6Djessi19ConditionObservableC7observeAA10Disposable_py5ValueQzc6onNext_tF":{"name":"observe(onNext:)","abstract":"<p>Start observe changes. Block will be called when value satisfy to condition.</p>","parent_name":"ConditionObservable"},"Classes/DisposeBag.html#/s:6Djessi10DisposeBagCACycfc":{"name":"init()","abstract":"<p>Initialize new object with empty bag.</p>","parent_name":"DisposeBag"},"Classes/ThreadObservable.html#/s:6Djessi16ThreadObservableC5Valuea":{"name":"Value","abstract":"<p>Observing value type</p>","parent_name":"ThreadObservable"},"Classes/ThreadObservable.html#/s:6Djessi16ThreadObservableC7observeAA10Disposable_py5ValueQzc6onNext_tF":{"name":"observe(onNext:)","abstract":"<p>Start observe changes. Value changes will be called on associated <code>queue</code>.</p>","parent_name":"ThreadObservable"},"Classes/TransformObservable.html#/s:6Djessi19TransformObservableC5Valuea":{"name":"Value","abstract":"<p>Observing value type</p>","parent_name":"TransformObservable"},"Classes/TransformObservable.html#/s:6Djessi19TransformObservableC7observeAA10Disposable_pyxc6onNext_tF":{"name":"observe(onNext:)","abstract":"<p>Start observe changes. Block will be called with transformed values.</p>","parent_name":"TransformObservable"},"Classes/AnyKeyPathObservable.html#/s:6Djessi20AnyKeyPathObservableC6sourcexv":{"name":"source","abstract":"<p>Source object whose field will be observed.</p>","parent_name":"AnyKeyPathObservable"},"Classes/AnyKeyPathObservable.html#/s:6Djessi20AnyKeyPathObservableC03keyD0s017ReferenceWritablecD0Cyxq_Gv":{"name":"keyPath","abstract":"<p>Smart key path to observe.</p>","parent_name":"AnyKeyPathObservable"},"Classes/AnyKeyPathObservable.html#/s:6Djessi20AnyKeyPathObservableC7observeAA10Disposable_pyq_c6onNext_tF":{"name":"observe(onNext:)","abstract":"<p>Start observe changes.</p>","parent_name":"AnyKeyPathObservable"},"Classes/AnyKeyPathObservable.html":{"name":"AnyKeyPathObservable","abstract":"<p>Implementation of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/KeyPathObservable.html\">KeyPathObservable</a></code> protocol.</p>"},"Classes/TransformObservable.html":{"name":"TransformObservable","abstract":"<p>Implementation of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Observable.html\">Observable</a></code> protocol. Define transformations for observables.</p>"},"Classes/ThreadObservable.html":{"name":"ThreadObservable","abstract":"<p>Implementation of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Observable.html\">Observable</a></code> protocol. Define multi-threading ability for observables.</p>"},"Classes/DisposeBag.html":{"name":"DisposeBag","abstract":"<p><code>DisposeBag</code> define mechanism to manage your <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Disposable.html\">Disposable</a></code> objects. Bag keep all disposables in memory while you not deinited the bag.</p>"},"Classes/ConditionObservable.html":{"name":"ConditionObservable","abstract":"<p>Implementation of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Observable.html\">Observable</a></code> protocol. Define callback condition for observables.</p>"},"Classes/GCDQueue.html":{"name":"GCDQueue","abstract":"<p>GCD wrapper for <code>DispatchQueue</code>&lsquo;s.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}